import fetch, { Headers } from "node-fetch";

let cbs_link = "https://opendata.cbs.nl/ODataApi/odata/70072ned/UntypedDataSet?$filter=((substringof(%27NL%27,RegioS)))&$select=Perioden,+TotaleBevolking_1";
let cbs_link2 = "https://odata4.cbs.nl/CBS/83878NED";
let cbs_link4 = "https://odata4.cbs.nl/CBS/84296NED";
let cbs_link_1 = cbs_link2+"/Observations";
let cbs_link_2 = cbs_link_1 +"/?$select=(Measure, Value)";
let cbs_link_3 = cbs_link_1 + "/?$top=10";
let cbs_link_4 = "https://odata4.cbs.nl/CBS/84296NED/$metadata";

var myHeaders = new Headers();

myHeaders.append("Accept", "text"/"xml")

var requestOptions = {
  method: 'GET',
  headers: myHeaders,
  redirect: 'follow'
};

fetch("https://odata4.cbs.nl/CBS/83878NED/$metadata", requestOptions)
    .then(response => response.text())
    .then( (text) => {
    //String filtering & cleaning
    let xml_cleanup1 = text.replace(/=/g,":")
    let xml_cleanup2 = xml_cleanup1.replace(/\/>/g, "");
    let xml_cleanup3 = xml_cleanup2.replace(/\>/g, "");
    let xml_cleanup4 = xml_cleanup3.replace(/\/Key/g, "");
    let xml_cleanup5 = xml_cleanup4.replace(/Name/g, " \"Name\"");
    let xml_cleanup6 = xml_cleanup5.replace(/Key/g,"")
    let xml_cleanup7 = xml_cleanup6.replace(/<</g,"<")
    let xml_cleanup8 = xml_cleanup7.replace(/\?/g,"")
    let xml_cleanup9 = xml_cleanup8.replace("Type","\"Type\"")
    let xml_cleanup10 = xml_cleanup9.replace("Nullable","\"Nullable\"")

    let xml_final = xml_cleanup10.split("<")

    let dataset_xml = [];
    // code voor array specifiek op dataset die ik wil + wat ruimte
    for (let i = 0; i<xml_final.length; i++) {
        if(String(xml_final[i]).includes("Cbs.Ccb.MemModels")) {
            dataset_xml.push(xml_final[i]);
            if (xml_final[i] == dataset_xml[0]) {
                for (let j = 1; j<20;j++){
                    dataset_xml.push(xml_final[i+j])
                }
            }else break
        }else continue
    }
    // code die onnodige data eruit haalt
    for (let i=0; i<dataset_xml.length;i++){
        if (String(dataset_xml[i]).includes("PropertyRef")) {
            dataset_xml.splice(i,1)
        }else break
    }
    // code die de overflow na de data eruit haalt
    for (let i=0;i<dataset_xml.length;i++){
        if (String(dataset_xml[i]).includes("/EntityType")){
            dataset_xml.splice(i,20)
        }
    }
    console.log("dataset1",dataset_xml)

    // JSON voorbereiding
    let propertiesArr = []
    for (let i = 0; i<dataset_xml.length; i++){
        if (xml_final[i].startsWith("Property ") && xml_final[i].endsWith("\ ")) {
            propertiesArr.push(dataset_xml[i]) }
        else { continue}
    }
    let values = "{\"";
    console.log("String:", String(propertiesArr[0]))
    for (let i=0; i<String(propertiesArr[0].length);i++) {
        if (String(propertiesArr[0]).charCodeAt(i) >= 65 && String(propertiesArr[0]).charCodeAt(i) <= 90){
            values += String(propertiesArr[0])[i]
        }else if (String(propertiesArr[0]).charCodeAt(i) >= 97 && String(propertiesArr[0]).charCodeAt(i) <= 122) {
            values += String(propertiesArr[0])[i]
        }else break
    }
    console.log(values)
    })
